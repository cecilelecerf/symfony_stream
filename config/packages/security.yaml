security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        users_in_memory: { memory: null }
        users_in_database: 
            entity: 
                class: App\Entity\User
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
                    # Cette règle définit les pages qui nécessitent une connexion
            security: true
            lazy: true
            provider: users_in_database
            custom_authenticator: App\Security\AppAuthenticator
            logout:
                path: app_logout
                # where to redirect after logout
                target: index
            form_login:
                # "app_login" is the name of the route created previously
                login_path: app_login
                check_path: app_login
                default_target_path: /
                username_parameter: _email
                password_parameter: _password
                enable_csrf: true
            entry_point: form_login  # Ajouter cette ligne pour spécifier l'entrée

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    # access_control:
    #     - { path: ^/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
    #     - { path: ^/, roles: ROLE_USER } 
                # Spécifiez que la page d'accueil ('/') ne doit être accessible que par des utilisateurs authentifiés
    access_control:
        # Rediriger vers /login pour les utilisateurs non connectés
        - { path: ^/login, roles: PUBLIC_ACCESS }
        - { path: ^/register, roles: PUBLIC_ACCESS }
        - { path: ^/.*, roles: ROLE_USER }


when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
